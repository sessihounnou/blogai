
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Theme
 * 
 */
export type Theme = {
  id: number
  title: string
}

/**
 * Model Article
 * 
 */
export type Article = {
  id: number
  status: boolean
  title: string
  content: string
  image: string
}

/**
 * Model Image
 * 
 */
export type Image = {
  id: number
  name: string
}

/**
 * Model ThemeArticle
 * 
 */
export type ThemeArticle = {
  id: number
  themeId: number
  articleId: number
}

/**
 * Model ThemeImage
 * 
 */
export type ThemeImage = {
  id: number
  themeId: number
  imageId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Themes
 * const themes = await prisma.theme.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Themes
   * const themes = await prisma.theme.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<GlobalReject>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<GlobalReject>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<GlobalReject>;

  /**
   * `prisma.themeArticle`: Exposes CRUD operations for the **ThemeArticle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemeArticles
    * const themeArticles = await prisma.themeArticle.findMany()
    * ```
    */
  get themeArticle(): Prisma.ThemeArticleDelegate<GlobalReject>;

  /**
   * `prisma.themeImage`: Exposes CRUD operations for the **ThemeImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemeImages
    * const themeImages = await prisma.themeImage.findMany()
    * ```
    */
  get themeImage(): Prisma.ThemeImageDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Theme: 'Theme',
    Article: 'Article',
    Image: 'Image',
    ThemeArticle: 'ThemeArticle',
    ThemeImage: 'ThemeImage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ThemeCountOutputType
   */


  export type ThemeCountOutputType = {
    articles: number
    image: number
  }

  export type ThemeCountOutputTypeSelect = {
    articles?: boolean
    image?: boolean
  }

  export type ThemeCountOutputTypeGetPayload<S extends boolean | null | undefined | ThemeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ThemeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ThemeCountOutputTypeArgs)
    ? ThemeCountOutputType 
    : S extends { select: any } & (ThemeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ThemeCountOutputType ? ThemeCountOutputType[P] : never
  } 
      : ThemeCountOutputType




  // Custom InputTypes

  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ThemeCountOutputType
     * 
    **/
    select?: ThemeCountOutputTypeSelect | null
  }



  /**
   * Count Type ArticleCountOutputType
   */


  export type ArticleCountOutputType = {
    theme: number
  }

  export type ArticleCountOutputTypeSelect = {
    theme?: boolean
  }

  export type ArticleCountOutputTypeGetPayload<S extends boolean | null | undefined | ArticleCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ArticleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ArticleCountOutputTypeArgs)
    ? ArticleCountOutputType 
    : S extends { select: any } & (ArticleCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ArticleCountOutputType ? ArticleCountOutputType[P] : never
  } 
      : ArticleCountOutputType




  // Custom InputTypes

  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArticleCountOutputType
     * 
    **/
    select?: ArticleCountOutputTypeSelect | null
  }



  /**
   * Count Type ImageCountOutputType
   */


  export type ImageCountOutputType = {
    theme: number
  }

  export type ImageCountOutputTypeSelect = {
    theme?: boolean
  }

  export type ImageCountOutputTypeGetPayload<S extends boolean | null | undefined | ImageCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ImageCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ImageCountOutputTypeArgs)
    ? ImageCountOutputType 
    : S extends { select: any } & (ImageCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ImageCountOutputType ? ImageCountOutputType[P] : never
  } 
      : ImageCountOutputType




  // Custom InputTypes

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     * 
    **/
    select?: ImageCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Theme
   */


  export type AggregateTheme = {
    _count: ThemeCountAggregateOutputType | null
    _avg: ThemeAvgAggregateOutputType | null
    _sum: ThemeSumAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeAvgAggregateOutputType = {
    id: number | null
  }

  export type ThemeSumAggregateOutputType = {
    id: number | null
  }

  export type ThemeMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type ThemeMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type ThemeCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type ThemeAvgAggregateInputType = {
    id?: true
  }

  export type ThemeSumAggregateInputType = {
    id?: true
  }

  export type ThemeMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type ThemeMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type ThemeCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type ThemeAggregateArgs = {
    /**
     * Filter which Theme to aggregate.
     * 
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    _count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }




  export type ThemeGroupByArgs = {
    where?: ThemeWhereInput
    orderBy?: Enumerable<ThemeOrderByWithAggregationInput>
    by: Array<ThemeScalarFieldEnum>
    having?: ThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeCountAggregateInputType | true
    _avg?: ThemeAvgAggregateInputType
    _sum?: ThemeSumAggregateInputType
    _min?: ThemeMinAggregateInputType
    _max?: ThemeMaxAggregateInputType
  }


  export type ThemeGroupByOutputType = {
    id: number
    title: string
    _count: ThemeCountAggregateOutputType | null
    _avg: ThemeAvgAggregateOutputType | null
    _sum: ThemeSumAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  type GetThemeGroupByPayload<T extends ThemeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeGroupByOutputType[P]>
        }
      >
    >


  export type ThemeSelect = {
    id?: boolean
    title?: boolean
    articles?: boolean | ThemeArticlesArgs
    image?: boolean | ThemeImageArgs
    _count?: boolean | ThemeCountOutputTypeArgs
  }


  export type ThemeInclude = {
    articles?: boolean | ThemeArticlesArgs
    image?: boolean | ThemeImageArgs
    _count?: boolean | ThemeCountOutputTypeArgs
  } 

  export type ThemeGetPayload<S extends boolean | null | undefined | ThemeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Theme :
    S extends undefined ? never :
    S extends { include: any } & (ThemeArgs | ThemeFindManyArgs)
    ? Theme  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'articles' ? Array < ThemeArticleGetPayload<S['include'][P]>>  :
        P extends 'image' ? Array < ThemeImageGetPayload<S['include'][P]>>  :
        P extends '_count' ? ThemeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ThemeArgs | ThemeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'articles' ? Array < ThemeArticleGetPayload<S['select'][P]>>  :
        P extends 'image' ? Array < ThemeImageGetPayload<S['select'][P]>>  :
        P extends '_count' ? ThemeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Theme ? Theme[P] : never
  } 
      : Theme


  type ThemeCountArgs = Merge<
    Omit<ThemeFindManyArgs, 'select' | 'include'> & {
      select?: ThemeCountAggregateInputType | true
    }
  >

  export interface ThemeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThemeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThemeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Theme'> extends True ? Prisma__ThemeClient<ThemeGetPayload<T>> : Prisma__ThemeClient<ThemeGetPayload<T> | null, null>

    /**
     * Find one Theme that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThemeFindUniqueOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThemeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ThemeFindUniqueOrThrowArgs>
    ): Prisma__ThemeClient<ThemeGetPayload<T>>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThemeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThemeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Theme'> extends True ? Prisma__ThemeClient<ThemeGetPayload<T>> : Prisma__ThemeClient<ThemeGetPayload<T> | null, null>

    /**
     * Find the first Theme that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThemeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ThemeFindFirstOrThrowArgs>
    ): Prisma__ThemeClient<ThemeGetPayload<T>>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWithIdOnly = await prisma.theme.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThemeFindManyArgs>(
      args?: SelectSubset<T, ThemeFindManyArgs>
    ): PrismaPromise<Array<ThemeGetPayload<T>>>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
    **/
    create<T extends ThemeCreateArgs>(
      args: SelectSubset<T, ThemeCreateArgs>
    ): Prisma__ThemeClient<ThemeGetPayload<T>>

    /**
     * Create many Themes.
     *     @param {ThemeCreateManyArgs} args - Arguments to create many Themes.
     *     @example
     *     // Create many Themes
     *     const theme = await prisma.theme.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThemeCreateManyArgs>(
      args?: SelectSubset<T, ThemeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
    **/
    delete<T extends ThemeDeleteArgs>(
      args: SelectSubset<T, ThemeDeleteArgs>
    ): Prisma__ThemeClient<ThemeGetPayload<T>>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThemeUpdateArgs>(
      args: SelectSubset<T, ThemeUpdateArgs>
    ): Prisma__ThemeClient<ThemeGetPayload<T>>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThemeDeleteManyArgs>(
      args?: SelectSubset<T, ThemeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThemeUpdateManyArgs>(
      args: SelectSubset<T, ThemeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
    **/
    upsert<T extends ThemeUpsertArgs>(
      args: SelectSubset<T, ThemeUpsertArgs>
    ): Prisma__ThemeClient<ThemeGetPayload<T>>

    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): PrismaPromise<GetThemeAggregateType<T>>

    /**
     * Group by Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeGroupByArgs['orderBy'] }
        : { orderBy?: ThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThemeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    articles<T extends ThemeArticlesArgs= {}>(args?: Subset<T, ThemeArticlesArgs>): PrismaPromise<Array<ThemeArticleGetPayload<T>>| Null>;

    image<T extends ThemeImageArgs= {}>(args?: Subset<T, ThemeImageArgs>): PrismaPromise<Array<ThemeImageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Theme base type for findUnique actions
   */
  export type ThemeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * Filter, which Theme to fetch.
     * 
    **/
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findUnique
   */
  export interface ThemeFindUniqueArgs extends ThemeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Theme findUniqueOrThrow
   */
  export type ThemeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * Filter, which Theme to fetch.
     * 
    **/
    where: ThemeWhereUniqueInput
  }


  /**
   * Theme base type for findFirst actions
   */
  export type ThemeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * Filter, which Theme to fetch.
     * 
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     * 
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     * 
    **/
    distinct?: Enumerable<ThemeScalarFieldEnum>
  }

  /**
   * Theme findFirst
   */
  export interface ThemeFindFirstArgs extends ThemeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Theme findFirstOrThrow
   */
  export type ThemeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * Filter, which Theme to fetch.
     * 
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     * 
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     * 
    **/
    distinct?: Enumerable<ThemeScalarFieldEnum>
  }


  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * Filter, which Themes to fetch.
     * 
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
     * 
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThemeScalarFieldEnum>
  }


  /**
   * Theme create
   */
  export type ThemeCreateArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * The data needed to create a Theme.
     * 
    **/
    data: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
  }


  /**
   * Theme createMany
   */
  export type ThemeCreateManyArgs = {
    /**
     * The data used to create many Themes.
     * 
    **/
    data: Enumerable<ThemeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Theme update
   */
  export type ThemeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * The data needed to update a Theme.
     * 
    **/
    data: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
    /**
     * Choose, which Theme to update.
     * 
    **/
    where: ThemeWhereUniqueInput
  }


  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs = {
    /**
     * The data used to update Themes.
     * 
    **/
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     * 
    **/
    where?: ThemeWhereInput
  }


  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * The filter to search for the Theme to update in case it exists.
     * 
    **/
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
     * 
    **/
    create: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
  }


  /**
   * Theme delete
   */
  export type ThemeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
    /**
     * Filter which Theme to delete.
     * 
    **/
    where: ThemeWhereUniqueInput
  }


  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs = {
    /**
     * Filter which Themes to delete
     * 
    **/
    where?: ThemeWhereInput
  }


  /**
   * Theme.articles
   */
  export type ThemeArticlesArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    where?: ThemeArticleWhereInput
    orderBy?: Enumerable<ThemeArticleOrderByWithRelationInput>
    cursor?: ThemeArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ThemeArticleScalarFieldEnum>
  }


  /**
   * Theme.image
   */
  export type ThemeImageArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    where?: ThemeImageWhereInput
    orderBy?: Enumerable<ThemeImageOrderByWithRelationInput>
    cursor?: ThemeImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ThemeImageScalarFieldEnum>
  }


  /**
   * Theme without action
   */
  export type ThemeArgs = {
    /**
     * Select specific fields to fetch from the Theme
     * 
    **/
    select?: ThemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeInclude | null
  }



  /**
   * Model Article
   */


  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    id: number | null
  }

  export type ArticleSumAggregateOutputType = {
    id: number | null
  }

  export type ArticleMinAggregateOutputType = {
    id: number | null
    status: boolean | null
    title: string | null
    content: string | null
    image: string | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: number | null
    status: boolean | null
    title: string | null
    content: string | null
    image: string | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    status: number
    title: number
    content: number
    image: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    id?: true
  }

  export type ArticleSumAggregateInputType = {
    id?: true
  }

  export type ArticleMinAggregateInputType = {
    id?: true
    status?: true
    title?: true
    content?: true
    image?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    status?: true
    title?: true
    content?: true
    image?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    status?: true
    title?: true
    content?: true
    image?: true
    _all?: true
  }

  export type ArticleAggregateArgs = {
    /**
     * Filter which Article to aggregate.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs = {
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithAggregationInput>
    by: Array<ArticleScalarFieldEnum>
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }


  export type ArticleGroupByOutputType = {
    id: number
    status: boolean
    title: string
    content: string
    image: string
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect = {
    id?: boolean
    status?: boolean
    title?: boolean
    content?: boolean
    image?: boolean
    theme?: boolean | ArticleThemeArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  }


  export type ArticleInclude = {
    theme?: boolean | ArticleThemeArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  } 

  export type ArticleGetPayload<S extends boolean | null | undefined | ArticleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Article :
    S extends undefined ? never :
    S extends { include: any } & (ArticleArgs | ArticleFindManyArgs)
    ? Article  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'theme' ? Array < ThemeArticleGetPayload<S['include'][P]>>  :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ArticleArgs | ArticleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'theme' ? Array < ThemeArticleGetPayload<S['select'][P]>>  :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Article ? Article[P] : never
  } 
      : Article


  type ArticleCountArgs = Merge<
    Omit<ArticleFindManyArgs, 'select' | 'include'> & {
      select?: ArticleCountAggregateInputType | true
    }
  >

  export interface ArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find one Article that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindUniqueOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find the first Article that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindFirstOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArticleFindManyArgs>(
      args?: SelectSubset<T, ArticleFindManyArgs>
    ): PrismaPromise<Array<ArticleGetPayload<T>>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
    **/
    create<T extends ArticleCreateArgs>(
      args: SelectSubset<T, ArticleCreateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Create many Articles.
     *     @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     *     @example
     *     // Create many Articles
     *     const article = await prisma.article.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArticleCreateManyArgs>(
      args?: SelectSubset<T, ArticleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
    **/
    delete<T extends ArticleDeleteArgs>(
      args: SelectSubset<T, ArticleDeleteArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArticleUpdateArgs>(
      args: SelectSubset<T, ArticleUpdateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArticleDeleteManyArgs>(
      args?: SelectSubset<T, ArticleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArticleUpdateManyArgs>(
      args: SelectSubset<T, ArticleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
    **/
    upsert<T extends ArticleUpsertArgs>(
      args: SelectSubset<T, ArticleUpsertArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArticleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    theme<T extends ArticleThemeArgs= {}>(args?: Subset<T, ArticleThemeArgs>): PrismaPromise<Array<ThemeArticleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Article base type for findUnique actions
   */
  export type ArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     * 
    **/
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUnique
   */
  export interface ArticleFindUniqueArgs extends ArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     * 
    **/
    where: ArticleWhereUniqueInput
  }


  /**
   * Article base type for findFirst actions
   */
  export type ArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     * 
    **/
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }

  /**
   * Article findFirst
   */
  export interface ArticleFindFirstArgs extends ArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     * 
    **/
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article findMany
   */
  export type ArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Articles to fetch.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article create
   */
  export type ArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * The data needed to create a Article.
     * 
    **/
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }


  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs = {
    /**
     * The data used to create many Articles.
     * 
    **/
    data: Enumerable<ArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Article update
   */
  export type ArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * The data needed to update a Article.
     * 
    **/
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     * 
    **/
    where: ArticleWhereUniqueInput
  }


  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs = {
    /**
     * The data used to update Articles.
     * 
    **/
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     * 
    **/
    where?: ArticleWhereInput
  }


  /**
   * Article upsert
   */
  export type ArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * The filter to search for the Article to update in case it exists.
     * 
    **/
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     * 
    **/
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }


  /**
   * Article delete
   */
  export type ArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter which Article to delete.
     * 
    **/
    where: ArticleWhereUniqueInput
  }


  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs = {
    /**
     * Filter which Articles to delete
     * 
    **/
    where?: ArticleWhereInput
  }


  /**
   * Article.theme
   */
  export type ArticleThemeArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    where?: ThemeArticleWhereInput
    orderBy?: Enumerable<ThemeArticleOrderByWithRelationInput>
    cursor?: ThemeArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ThemeArticleScalarFieldEnum>
  }


  /**
   * Article without action
   */
  export type ArticleArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
  }



  /**
   * Model Image
   */


  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which Image to aggregate.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs = {
    where?: ImageWhereInput
    orderBy?: Enumerable<ImageOrderByWithAggregationInput>
    by: Array<ImageScalarFieldEnum>
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }


  export type ImageGroupByOutputType = {
    id: number
    name: string
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect = {
    id?: boolean
    name?: boolean
    theme?: boolean | ImageThemeArgs
    _count?: boolean | ImageCountOutputTypeArgs
  }


  export type ImageInclude = {
    theme?: boolean | ImageThemeArgs
    _count?: boolean | ImageCountOutputTypeArgs
  } 

  export type ImageGetPayload<S extends boolean | null | undefined | ImageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Image :
    S extends undefined ? never :
    S extends { include: any } & (ImageArgs | ImageFindManyArgs)
    ? Image  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'theme' ? Array < ThemeImageGetPayload<S['include'][P]>>  :
        P extends '_count' ? ImageCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ImageArgs | ImageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'theme' ? Array < ThemeImageGetPayload<S['select'][P]>>  :
        P extends '_count' ? ImageCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Image ? Image[P] : never
  } 
      : Image


  type ImageCountArgs = Merge<
    Omit<ImageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }
  >

  export interface ImageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Image'> extends True ? Prisma__ImageClient<ImageGetPayload<T>> : Prisma__ImageClient<ImageGetPayload<T> | null, null>

    /**
     * Find one Image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ImageFindUniqueOrThrowArgs>
    ): Prisma__ImageClient<ImageGetPayload<T>>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Image'> extends True ? Prisma__ImageClient<ImageGetPayload<T>> : Prisma__ImageClient<ImageGetPayload<T> | null, null>

    /**
     * Find the first Image that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ImageFindFirstOrThrowArgs>
    ): Prisma__ImageClient<ImageGetPayload<T>>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs>(
      args?: SelectSubset<T, ImageFindManyArgs>
    ): PrismaPromise<Array<ImageGetPayload<T>>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs>(
      args: SelectSubset<T, ImageCreateArgs>
    ): Prisma__ImageClient<ImageGetPayload<T>>

    /**
     * Create many Images.
     *     @param {ImageCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const image = await prisma.image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageCreateManyArgs>(
      args?: SelectSubset<T, ImageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs>(
      args: SelectSubset<T, ImageDeleteArgs>
    ): Prisma__ImageClient<ImageGetPayload<T>>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs>(
      args: SelectSubset<T, ImageUpdateArgs>
    ): Prisma__ImageClient<ImageGetPayload<T>>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs>(
      args?: SelectSubset<T, ImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs>(
      args: SelectSubset<T, ImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs>(
      args: SelectSubset<T, ImageUpsertArgs>
    ): Prisma__ImageClient<ImageGetPayload<T>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    theme<T extends ImageThemeArgs= {}>(args?: Subset<T, ImageThemeArgs>): PrismaPromise<Array<ThemeImageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Image base type for findUnique actions
   */
  export type ImageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUnique
   */
  export interface ImageFindUniqueArgs extends ImageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image base type for findFirst actions
   */
  export type ImageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     * 
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }

  /**
   * Image findFirst
   */
  export interface ImageFindFirstArgs extends ImageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     * 
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Images to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image create
   */
  export type ImageCreateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to create a Image.
     * 
    **/
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image createMany
   */
  export type ImageCreateManyArgs = {
    /**
     * The data used to create many Images.
     * 
    **/
    data: Enumerable<ImageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to update a Image.
     * 
    **/
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs = {
    /**
     * The data used to update Images.
     * 
    **/
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The filter to search for the Image to update in case it exists.
     * 
    **/
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     * 
    **/
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter which Image to delete.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs = {
    /**
     * Filter which Images to delete
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image.theme
   */
  export type ImageThemeArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    where?: ThemeImageWhereInput
    orderBy?: Enumerable<ThemeImageOrderByWithRelationInput>
    cursor?: ThemeImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ThemeImageScalarFieldEnum>
  }


  /**
   * Image without action
   */
  export type ImageArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
  }



  /**
   * Model ThemeArticle
   */


  export type AggregateThemeArticle = {
    _count: ThemeArticleCountAggregateOutputType | null
    _avg: ThemeArticleAvgAggregateOutputType | null
    _sum: ThemeArticleSumAggregateOutputType | null
    _min: ThemeArticleMinAggregateOutputType | null
    _max: ThemeArticleMaxAggregateOutputType | null
  }

  export type ThemeArticleAvgAggregateOutputType = {
    id: number | null
    themeId: number | null
    articleId: number | null
  }

  export type ThemeArticleSumAggregateOutputType = {
    id: number | null
    themeId: number | null
    articleId: number | null
  }

  export type ThemeArticleMinAggregateOutputType = {
    id: number | null
    themeId: number | null
    articleId: number | null
  }

  export type ThemeArticleMaxAggregateOutputType = {
    id: number | null
    themeId: number | null
    articleId: number | null
  }

  export type ThemeArticleCountAggregateOutputType = {
    id: number
    themeId: number
    articleId: number
    _all: number
  }


  export type ThemeArticleAvgAggregateInputType = {
    id?: true
    themeId?: true
    articleId?: true
  }

  export type ThemeArticleSumAggregateInputType = {
    id?: true
    themeId?: true
    articleId?: true
  }

  export type ThemeArticleMinAggregateInputType = {
    id?: true
    themeId?: true
    articleId?: true
  }

  export type ThemeArticleMaxAggregateInputType = {
    id?: true
    themeId?: true
    articleId?: true
  }

  export type ThemeArticleCountAggregateInputType = {
    id?: true
    themeId?: true
    articleId?: true
    _all?: true
  }

  export type ThemeArticleAggregateArgs = {
    /**
     * Filter which ThemeArticle to aggregate.
     * 
    **/
    where?: ThemeArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThemeArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeArticles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemeArticles
    **/
    _count?: true | ThemeArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeArticleMaxAggregateInputType
  }

  export type GetThemeArticleAggregateType<T extends ThemeArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateThemeArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemeArticle[P]>
      : GetScalarType<T[P], AggregateThemeArticle[P]>
  }




  export type ThemeArticleGroupByArgs = {
    where?: ThemeArticleWhereInput
    orderBy?: Enumerable<ThemeArticleOrderByWithAggregationInput>
    by: Array<ThemeArticleScalarFieldEnum>
    having?: ThemeArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeArticleCountAggregateInputType | true
    _avg?: ThemeArticleAvgAggregateInputType
    _sum?: ThemeArticleSumAggregateInputType
    _min?: ThemeArticleMinAggregateInputType
    _max?: ThemeArticleMaxAggregateInputType
  }


  export type ThemeArticleGroupByOutputType = {
    id: number
    themeId: number
    articleId: number
    _count: ThemeArticleCountAggregateOutputType | null
    _avg: ThemeArticleAvgAggregateOutputType | null
    _sum: ThemeArticleSumAggregateOutputType | null
    _min: ThemeArticleMinAggregateOutputType | null
    _max: ThemeArticleMaxAggregateOutputType | null
  }

  type GetThemeArticleGroupByPayload<T extends ThemeArticleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ThemeArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeArticleGroupByOutputType[P]>
        }
      >
    >


  export type ThemeArticleSelect = {
    id?: boolean
    themeId?: boolean
    theme?: boolean | ThemeArgs
    articleId?: boolean
    article?: boolean | ArticleArgs
  }


  export type ThemeArticleInclude = {
    theme?: boolean | ThemeArgs
    article?: boolean | ArticleArgs
  } 

  export type ThemeArticleGetPayload<S extends boolean | null | undefined | ThemeArticleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ThemeArticle :
    S extends undefined ? never :
    S extends { include: any } & (ThemeArticleArgs | ThemeArticleFindManyArgs)
    ? ThemeArticle  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'theme' ? ThemeGetPayload<S['include'][P]> :
        P extends 'article' ? ArticleGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ThemeArticleArgs | ThemeArticleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'theme' ? ThemeGetPayload<S['select'][P]> :
        P extends 'article' ? ArticleGetPayload<S['select'][P]> :  P extends keyof ThemeArticle ? ThemeArticle[P] : never
  } 
      : ThemeArticle


  type ThemeArticleCountArgs = Merge<
    Omit<ThemeArticleFindManyArgs, 'select' | 'include'> & {
      select?: ThemeArticleCountAggregateInputType | true
    }
  >

  export interface ThemeArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ThemeArticle that matches the filter.
     * @param {ThemeArticleFindUniqueArgs} args - Arguments to find a ThemeArticle
     * @example
     * // Get one ThemeArticle
     * const themeArticle = await prisma.themeArticle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThemeArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThemeArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ThemeArticle'> extends True ? Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>> : Prisma__ThemeArticleClient<ThemeArticleGetPayload<T> | null, null>

    /**
     * Find one ThemeArticle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThemeArticleFindUniqueOrThrowArgs} args - Arguments to find a ThemeArticle
     * @example
     * // Get one ThemeArticle
     * const themeArticle = await prisma.themeArticle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThemeArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ThemeArticleFindUniqueOrThrowArgs>
    ): Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>>

    /**
     * Find the first ThemeArticle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleFindFirstArgs} args - Arguments to find a ThemeArticle
     * @example
     * // Get one ThemeArticle
     * const themeArticle = await prisma.themeArticle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThemeArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThemeArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ThemeArticle'> extends True ? Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>> : Prisma__ThemeArticleClient<ThemeArticleGetPayload<T> | null, null>

    /**
     * Find the first ThemeArticle that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleFindFirstOrThrowArgs} args - Arguments to find a ThemeArticle
     * @example
     * // Get one ThemeArticle
     * const themeArticle = await prisma.themeArticle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThemeArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ThemeArticleFindFirstOrThrowArgs>
    ): Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>>

    /**
     * Find zero or more ThemeArticles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemeArticles
     * const themeArticles = await prisma.themeArticle.findMany()
     * 
     * // Get first 10 ThemeArticles
     * const themeArticles = await prisma.themeArticle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeArticleWithIdOnly = await prisma.themeArticle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThemeArticleFindManyArgs>(
      args?: SelectSubset<T, ThemeArticleFindManyArgs>
    ): PrismaPromise<Array<ThemeArticleGetPayload<T>>>

    /**
     * Create a ThemeArticle.
     * @param {ThemeArticleCreateArgs} args - Arguments to create a ThemeArticle.
     * @example
     * // Create one ThemeArticle
     * const ThemeArticle = await prisma.themeArticle.create({
     *   data: {
     *     // ... data to create a ThemeArticle
     *   }
     * })
     * 
    **/
    create<T extends ThemeArticleCreateArgs>(
      args: SelectSubset<T, ThemeArticleCreateArgs>
    ): Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>>

    /**
     * Create many ThemeArticles.
     *     @param {ThemeArticleCreateManyArgs} args - Arguments to create many ThemeArticles.
     *     @example
     *     // Create many ThemeArticles
     *     const themeArticle = await prisma.themeArticle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThemeArticleCreateManyArgs>(
      args?: SelectSubset<T, ThemeArticleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ThemeArticle.
     * @param {ThemeArticleDeleteArgs} args - Arguments to delete one ThemeArticle.
     * @example
     * // Delete one ThemeArticle
     * const ThemeArticle = await prisma.themeArticle.delete({
     *   where: {
     *     // ... filter to delete one ThemeArticle
     *   }
     * })
     * 
    **/
    delete<T extends ThemeArticleDeleteArgs>(
      args: SelectSubset<T, ThemeArticleDeleteArgs>
    ): Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>>

    /**
     * Update one ThemeArticle.
     * @param {ThemeArticleUpdateArgs} args - Arguments to update one ThemeArticle.
     * @example
     * // Update one ThemeArticle
     * const themeArticle = await prisma.themeArticle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThemeArticleUpdateArgs>(
      args: SelectSubset<T, ThemeArticleUpdateArgs>
    ): Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>>

    /**
     * Delete zero or more ThemeArticles.
     * @param {ThemeArticleDeleteManyArgs} args - Arguments to filter ThemeArticles to delete.
     * @example
     * // Delete a few ThemeArticles
     * const { count } = await prisma.themeArticle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThemeArticleDeleteManyArgs>(
      args?: SelectSubset<T, ThemeArticleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemeArticles
     * const themeArticle = await prisma.themeArticle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThemeArticleUpdateManyArgs>(
      args: SelectSubset<T, ThemeArticleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ThemeArticle.
     * @param {ThemeArticleUpsertArgs} args - Arguments to update or create a ThemeArticle.
     * @example
     * // Update or create a ThemeArticle
     * const themeArticle = await prisma.themeArticle.upsert({
     *   create: {
     *     // ... data to create a ThemeArticle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemeArticle we want to update
     *   }
     * })
    **/
    upsert<T extends ThemeArticleUpsertArgs>(
      args: SelectSubset<T, ThemeArticleUpsertArgs>
    ): Prisma__ThemeArticleClient<ThemeArticleGetPayload<T>>

    /**
     * Count the number of ThemeArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleCountArgs} args - Arguments to filter ThemeArticles to count.
     * @example
     * // Count the number of ThemeArticles
     * const count = await prisma.themeArticle.count({
     *   where: {
     *     // ... the filter for the ThemeArticles we want to count
     *   }
     * })
    **/
    count<T extends ThemeArticleCountArgs>(
      args?: Subset<T, ThemeArticleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemeArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeArticleAggregateArgs>(args: Subset<T, ThemeArticleAggregateArgs>): PrismaPromise<GetThemeArticleAggregateType<T>>

    /**
     * Group by ThemeArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeArticleGroupByArgs['orderBy'] }
        : { orderBy?: ThemeArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeArticleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemeArticle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThemeArticleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    theme<T extends ThemeArgs= {}>(args?: Subset<T, ThemeArgs>): Prisma__ThemeClient<ThemeGetPayload<T> | Null>;

    article<T extends ArticleArgs= {}>(args?: Subset<T, ArticleArgs>): Prisma__ArticleClient<ArticleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ThemeArticle base type for findUnique actions
   */
  export type ThemeArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * Filter, which ThemeArticle to fetch.
     * 
    **/
    where: ThemeArticleWhereUniqueInput
  }

  /**
   * ThemeArticle findUnique
   */
  export interface ThemeArticleFindUniqueArgs extends ThemeArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ThemeArticle findUniqueOrThrow
   */
  export type ThemeArticleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * Filter, which ThemeArticle to fetch.
     * 
    **/
    where: ThemeArticleWhereUniqueInput
  }


  /**
   * ThemeArticle base type for findFirst actions
   */
  export type ThemeArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * Filter, which ThemeArticle to fetch.
     * 
    **/
    where?: ThemeArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeArticles.
     * 
    **/
    cursor?: ThemeArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeArticles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeArticles.
     * 
    **/
    distinct?: Enumerable<ThemeArticleScalarFieldEnum>
  }

  /**
   * ThemeArticle findFirst
   */
  export interface ThemeArticleFindFirstArgs extends ThemeArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ThemeArticle findFirstOrThrow
   */
  export type ThemeArticleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * Filter, which ThemeArticle to fetch.
     * 
    **/
    where?: ThemeArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeArticles.
     * 
    **/
    cursor?: ThemeArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeArticles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeArticles.
     * 
    **/
    distinct?: Enumerable<ThemeArticleScalarFieldEnum>
  }


  /**
   * ThemeArticle findMany
   */
  export type ThemeArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * Filter, which ThemeArticles to fetch.
     * 
    **/
    where?: ThemeArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemeArticles.
     * 
    **/
    cursor?: ThemeArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeArticles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThemeArticleScalarFieldEnum>
  }


  /**
   * ThemeArticle create
   */
  export type ThemeArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * The data needed to create a ThemeArticle.
     * 
    **/
    data: XOR<ThemeArticleCreateInput, ThemeArticleUncheckedCreateInput>
  }


  /**
   * ThemeArticle createMany
   */
  export type ThemeArticleCreateManyArgs = {
    /**
     * The data used to create many ThemeArticles.
     * 
    **/
    data: Enumerable<ThemeArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ThemeArticle update
   */
  export type ThemeArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * The data needed to update a ThemeArticle.
     * 
    **/
    data: XOR<ThemeArticleUpdateInput, ThemeArticleUncheckedUpdateInput>
    /**
     * Choose, which ThemeArticle to update.
     * 
    **/
    where: ThemeArticleWhereUniqueInput
  }


  /**
   * ThemeArticle updateMany
   */
  export type ThemeArticleUpdateManyArgs = {
    /**
     * The data used to update ThemeArticles.
     * 
    **/
    data: XOR<ThemeArticleUpdateManyMutationInput, ThemeArticleUncheckedUpdateManyInput>
    /**
     * Filter which ThemeArticles to update
     * 
    **/
    where?: ThemeArticleWhereInput
  }


  /**
   * ThemeArticle upsert
   */
  export type ThemeArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * The filter to search for the ThemeArticle to update in case it exists.
     * 
    **/
    where: ThemeArticleWhereUniqueInput
    /**
     * In case the ThemeArticle found by the `where` argument doesn't exist, create a new ThemeArticle with this data.
     * 
    **/
    create: XOR<ThemeArticleCreateInput, ThemeArticleUncheckedCreateInput>
    /**
     * In case the ThemeArticle was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThemeArticleUpdateInput, ThemeArticleUncheckedUpdateInput>
  }


  /**
   * ThemeArticle delete
   */
  export type ThemeArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
    /**
     * Filter which ThemeArticle to delete.
     * 
    **/
    where: ThemeArticleWhereUniqueInput
  }


  /**
   * ThemeArticle deleteMany
   */
  export type ThemeArticleDeleteManyArgs = {
    /**
     * Filter which ThemeArticles to delete
     * 
    **/
    where?: ThemeArticleWhereInput
  }


  /**
   * ThemeArticle without action
   */
  export type ThemeArticleArgs = {
    /**
     * Select specific fields to fetch from the ThemeArticle
     * 
    **/
    select?: ThemeArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeArticleInclude | null
  }



  /**
   * Model ThemeImage
   */


  export type AggregateThemeImage = {
    _count: ThemeImageCountAggregateOutputType | null
    _avg: ThemeImageAvgAggregateOutputType | null
    _sum: ThemeImageSumAggregateOutputType | null
    _min: ThemeImageMinAggregateOutputType | null
    _max: ThemeImageMaxAggregateOutputType | null
  }

  export type ThemeImageAvgAggregateOutputType = {
    id: number | null
    themeId: number | null
    imageId: number | null
  }

  export type ThemeImageSumAggregateOutputType = {
    id: number | null
    themeId: number | null
    imageId: number | null
  }

  export type ThemeImageMinAggregateOutputType = {
    id: number | null
    themeId: number | null
    imageId: number | null
  }

  export type ThemeImageMaxAggregateOutputType = {
    id: number | null
    themeId: number | null
    imageId: number | null
  }

  export type ThemeImageCountAggregateOutputType = {
    id: number
    themeId: number
    imageId: number
    _all: number
  }


  export type ThemeImageAvgAggregateInputType = {
    id?: true
    themeId?: true
    imageId?: true
  }

  export type ThemeImageSumAggregateInputType = {
    id?: true
    themeId?: true
    imageId?: true
  }

  export type ThemeImageMinAggregateInputType = {
    id?: true
    themeId?: true
    imageId?: true
  }

  export type ThemeImageMaxAggregateInputType = {
    id?: true
    themeId?: true
    imageId?: true
  }

  export type ThemeImageCountAggregateInputType = {
    id?: true
    themeId?: true
    imageId?: true
    _all?: true
  }

  export type ThemeImageAggregateArgs = {
    /**
     * Filter which ThemeImage to aggregate.
     * 
    **/
    where?: ThemeImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThemeImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemeImages
    **/
    _count?: true | ThemeImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeImageMaxAggregateInputType
  }

  export type GetThemeImageAggregateType<T extends ThemeImageAggregateArgs> = {
        [P in keyof T & keyof AggregateThemeImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemeImage[P]>
      : GetScalarType<T[P], AggregateThemeImage[P]>
  }




  export type ThemeImageGroupByArgs = {
    where?: ThemeImageWhereInput
    orderBy?: Enumerable<ThemeImageOrderByWithAggregationInput>
    by: Array<ThemeImageScalarFieldEnum>
    having?: ThemeImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeImageCountAggregateInputType | true
    _avg?: ThemeImageAvgAggregateInputType
    _sum?: ThemeImageSumAggregateInputType
    _min?: ThemeImageMinAggregateInputType
    _max?: ThemeImageMaxAggregateInputType
  }


  export type ThemeImageGroupByOutputType = {
    id: number
    themeId: number
    imageId: number
    _count: ThemeImageCountAggregateOutputType | null
    _avg: ThemeImageAvgAggregateOutputType | null
    _sum: ThemeImageSumAggregateOutputType | null
    _min: ThemeImageMinAggregateOutputType | null
    _max: ThemeImageMaxAggregateOutputType | null
  }

  type GetThemeImageGroupByPayload<T extends ThemeImageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ThemeImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeImageGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeImageGroupByOutputType[P]>
        }
      >
    >


  export type ThemeImageSelect = {
    id?: boolean
    themeId?: boolean
    theme?: boolean | ThemeArgs
    imageId?: boolean
    image?: boolean | ImageArgs
  }


  export type ThemeImageInclude = {
    theme?: boolean | ThemeArgs
    image?: boolean | ImageArgs
  } 

  export type ThemeImageGetPayload<S extends boolean | null | undefined | ThemeImageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ThemeImage :
    S extends undefined ? never :
    S extends { include: any } & (ThemeImageArgs | ThemeImageFindManyArgs)
    ? ThemeImage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'theme' ? ThemeGetPayload<S['include'][P]> :
        P extends 'image' ? ImageGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ThemeImageArgs | ThemeImageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'theme' ? ThemeGetPayload<S['select'][P]> :
        P extends 'image' ? ImageGetPayload<S['select'][P]> :  P extends keyof ThemeImage ? ThemeImage[P] : never
  } 
      : ThemeImage


  type ThemeImageCountArgs = Merge<
    Omit<ThemeImageFindManyArgs, 'select' | 'include'> & {
      select?: ThemeImageCountAggregateInputType | true
    }
  >

  export interface ThemeImageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ThemeImage that matches the filter.
     * @param {ThemeImageFindUniqueArgs} args - Arguments to find a ThemeImage
     * @example
     * // Get one ThemeImage
     * const themeImage = await prisma.themeImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThemeImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThemeImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ThemeImage'> extends True ? Prisma__ThemeImageClient<ThemeImageGetPayload<T>> : Prisma__ThemeImageClient<ThemeImageGetPayload<T> | null, null>

    /**
     * Find one ThemeImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThemeImageFindUniqueOrThrowArgs} args - Arguments to find a ThemeImage
     * @example
     * // Get one ThemeImage
     * const themeImage = await prisma.themeImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThemeImageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ThemeImageFindUniqueOrThrowArgs>
    ): Prisma__ThemeImageClient<ThemeImageGetPayload<T>>

    /**
     * Find the first ThemeImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageFindFirstArgs} args - Arguments to find a ThemeImage
     * @example
     * // Get one ThemeImage
     * const themeImage = await prisma.themeImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThemeImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThemeImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ThemeImage'> extends True ? Prisma__ThemeImageClient<ThemeImageGetPayload<T>> : Prisma__ThemeImageClient<ThemeImageGetPayload<T> | null, null>

    /**
     * Find the first ThemeImage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageFindFirstOrThrowArgs} args - Arguments to find a ThemeImage
     * @example
     * // Get one ThemeImage
     * const themeImage = await prisma.themeImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThemeImageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ThemeImageFindFirstOrThrowArgs>
    ): Prisma__ThemeImageClient<ThemeImageGetPayload<T>>

    /**
     * Find zero or more ThemeImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemeImages
     * const themeImages = await prisma.themeImage.findMany()
     * 
     * // Get first 10 ThemeImages
     * const themeImages = await prisma.themeImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeImageWithIdOnly = await prisma.themeImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThemeImageFindManyArgs>(
      args?: SelectSubset<T, ThemeImageFindManyArgs>
    ): PrismaPromise<Array<ThemeImageGetPayload<T>>>

    /**
     * Create a ThemeImage.
     * @param {ThemeImageCreateArgs} args - Arguments to create a ThemeImage.
     * @example
     * // Create one ThemeImage
     * const ThemeImage = await prisma.themeImage.create({
     *   data: {
     *     // ... data to create a ThemeImage
     *   }
     * })
     * 
    **/
    create<T extends ThemeImageCreateArgs>(
      args: SelectSubset<T, ThemeImageCreateArgs>
    ): Prisma__ThemeImageClient<ThemeImageGetPayload<T>>

    /**
     * Create many ThemeImages.
     *     @param {ThemeImageCreateManyArgs} args - Arguments to create many ThemeImages.
     *     @example
     *     // Create many ThemeImages
     *     const themeImage = await prisma.themeImage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThemeImageCreateManyArgs>(
      args?: SelectSubset<T, ThemeImageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ThemeImage.
     * @param {ThemeImageDeleteArgs} args - Arguments to delete one ThemeImage.
     * @example
     * // Delete one ThemeImage
     * const ThemeImage = await prisma.themeImage.delete({
     *   where: {
     *     // ... filter to delete one ThemeImage
     *   }
     * })
     * 
    **/
    delete<T extends ThemeImageDeleteArgs>(
      args: SelectSubset<T, ThemeImageDeleteArgs>
    ): Prisma__ThemeImageClient<ThemeImageGetPayload<T>>

    /**
     * Update one ThemeImage.
     * @param {ThemeImageUpdateArgs} args - Arguments to update one ThemeImage.
     * @example
     * // Update one ThemeImage
     * const themeImage = await prisma.themeImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThemeImageUpdateArgs>(
      args: SelectSubset<T, ThemeImageUpdateArgs>
    ): Prisma__ThemeImageClient<ThemeImageGetPayload<T>>

    /**
     * Delete zero or more ThemeImages.
     * @param {ThemeImageDeleteManyArgs} args - Arguments to filter ThemeImages to delete.
     * @example
     * // Delete a few ThemeImages
     * const { count } = await prisma.themeImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThemeImageDeleteManyArgs>(
      args?: SelectSubset<T, ThemeImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemeImages
     * const themeImage = await prisma.themeImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThemeImageUpdateManyArgs>(
      args: SelectSubset<T, ThemeImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ThemeImage.
     * @param {ThemeImageUpsertArgs} args - Arguments to update or create a ThemeImage.
     * @example
     * // Update or create a ThemeImage
     * const themeImage = await prisma.themeImage.upsert({
     *   create: {
     *     // ... data to create a ThemeImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemeImage we want to update
     *   }
     * })
    **/
    upsert<T extends ThemeImageUpsertArgs>(
      args: SelectSubset<T, ThemeImageUpsertArgs>
    ): Prisma__ThemeImageClient<ThemeImageGetPayload<T>>

    /**
     * Count the number of ThemeImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageCountArgs} args - Arguments to filter ThemeImages to count.
     * @example
     * // Count the number of ThemeImages
     * const count = await prisma.themeImage.count({
     *   where: {
     *     // ... the filter for the ThemeImages we want to count
     *   }
     * })
    **/
    count<T extends ThemeImageCountArgs>(
      args?: Subset<T, ThemeImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemeImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeImageAggregateArgs>(args: Subset<T, ThemeImageAggregateArgs>): PrismaPromise<GetThemeImageAggregateType<T>>

    /**
     * Group by ThemeImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeImageGroupByArgs['orderBy'] }
        : { orderBy?: ThemeImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeImageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemeImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThemeImageClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    theme<T extends ThemeArgs= {}>(args?: Subset<T, ThemeArgs>): Prisma__ThemeClient<ThemeGetPayload<T> | Null>;

    image<T extends ImageArgs= {}>(args?: Subset<T, ImageArgs>): Prisma__ImageClient<ImageGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ThemeImage base type for findUnique actions
   */
  export type ThemeImageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * Filter, which ThemeImage to fetch.
     * 
    **/
    where: ThemeImageWhereUniqueInput
  }

  /**
   * ThemeImage findUnique
   */
  export interface ThemeImageFindUniqueArgs extends ThemeImageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ThemeImage findUniqueOrThrow
   */
  export type ThemeImageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * Filter, which ThemeImage to fetch.
     * 
    **/
    where: ThemeImageWhereUniqueInput
  }


  /**
   * ThemeImage base type for findFirst actions
   */
  export type ThemeImageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * Filter, which ThemeImage to fetch.
     * 
    **/
    where?: ThemeImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeImages.
     * 
    **/
    cursor?: ThemeImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeImages.
     * 
    **/
    distinct?: Enumerable<ThemeImageScalarFieldEnum>
  }

  /**
   * ThemeImage findFirst
   */
  export interface ThemeImageFindFirstArgs extends ThemeImageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ThemeImage findFirstOrThrow
   */
  export type ThemeImageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * Filter, which ThemeImage to fetch.
     * 
    **/
    where?: ThemeImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeImages.
     * 
    **/
    cursor?: ThemeImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeImages.
     * 
    **/
    distinct?: Enumerable<ThemeImageScalarFieldEnum>
  }


  /**
   * ThemeImage findMany
   */
  export type ThemeImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * Filter, which ThemeImages to fetch.
     * 
    **/
    where?: ThemeImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ThemeImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemeImages.
     * 
    **/
    cursor?: ThemeImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeImages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThemeImageScalarFieldEnum>
  }


  /**
   * ThemeImage create
   */
  export type ThemeImageCreateArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * The data needed to create a ThemeImage.
     * 
    **/
    data: XOR<ThemeImageCreateInput, ThemeImageUncheckedCreateInput>
  }


  /**
   * ThemeImage createMany
   */
  export type ThemeImageCreateManyArgs = {
    /**
     * The data used to create many ThemeImages.
     * 
    **/
    data: Enumerable<ThemeImageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ThemeImage update
   */
  export type ThemeImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * The data needed to update a ThemeImage.
     * 
    **/
    data: XOR<ThemeImageUpdateInput, ThemeImageUncheckedUpdateInput>
    /**
     * Choose, which ThemeImage to update.
     * 
    **/
    where: ThemeImageWhereUniqueInput
  }


  /**
   * ThemeImage updateMany
   */
  export type ThemeImageUpdateManyArgs = {
    /**
     * The data used to update ThemeImages.
     * 
    **/
    data: XOR<ThemeImageUpdateManyMutationInput, ThemeImageUncheckedUpdateManyInput>
    /**
     * Filter which ThemeImages to update
     * 
    **/
    where?: ThemeImageWhereInput
  }


  /**
   * ThemeImage upsert
   */
  export type ThemeImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * The filter to search for the ThemeImage to update in case it exists.
     * 
    **/
    where: ThemeImageWhereUniqueInput
    /**
     * In case the ThemeImage found by the `where` argument doesn't exist, create a new ThemeImage with this data.
     * 
    **/
    create: XOR<ThemeImageCreateInput, ThemeImageUncheckedCreateInput>
    /**
     * In case the ThemeImage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThemeImageUpdateInput, ThemeImageUncheckedUpdateInput>
  }


  /**
   * ThemeImage delete
   */
  export type ThemeImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
    /**
     * Filter which ThemeImage to delete.
     * 
    **/
    where: ThemeImageWhereUniqueInput
  }


  /**
   * ThemeImage deleteMany
   */
  export type ThemeImageDeleteManyArgs = {
    /**
     * Filter which ThemeImages to delete
     * 
    **/
    where?: ThemeImageWhereInput
  }


  /**
   * ThemeImage without action
   */
  export type ThemeImageArgs = {
    /**
     * Select specific fields to fetch from the ThemeImage
     * 
    **/
    select?: ThemeImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThemeImageInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArticleScalarFieldEnum: {
    id: 'id',
    status: 'status',
    title: 'title',
    content: 'content',
    image: 'image'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const ThemeArticleScalarFieldEnum: {
    id: 'id',
    themeId: 'themeId',
    articleId: 'articleId'
  };

  export type ThemeArticleScalarFieldEnum = (typeof ThemeArticleScalarFieldEnum)[keyof typeof ThemeArticleScalarFieldEnum]


  export const ThemeImageScalarFieldEnum: {
    id: 'id',
    themeId: 'themeId',
    imageId: 'imageId'
  };

  export type ThemeImageScalarFieldEnum = (typeof ThemeImageScalarFieldEnum)[keyof typeof ThemeImageScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type ThemeWhereInput = {
    AND?: Enumerable<ThemeWhereInput>
    OR?: Enumerable<ThemeWhereInput>
    NOT?: Enumerable<ThemeWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    articles?: ThemeArticleListRelationFilter
    image?: ThemeImageListRelationFilter
  }

  export type ThemeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    articles?: ThemeArticleOrderByRelationAggregateInput
    image?: ThemeImageOrderByRelationAggregateInput
  }

  export type ThemeWhereUniqueInput = {
    id?: number
  }

  export type ThemeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    _count?: ThemeCountOrderByAggregateInput
    _avg?: ThemeAvgOrderByAggregateInput
    _max?: ThemeMaxOrderByAggregateInput
    _min?: ThemeMinOrderByAggregateInput
    _sum?: ThemeSumOrderByAggregateInput
  }

  export type ThemeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThemeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThemeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThemeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
  }

  export type ArticleWhereInput = {
    AND?: Enumerable<ArticleWhereInput>
    OR?: Enumerable<ArticleWhereInput>
    NOT?: Enumerable<ArticleWhereInput>
    id?: IntFilter | number
    status?: BoolFilter | boolean
    title?: StringFilter | string
    content?: StringFilter | string
    image?: StringFilter | string
    theme?: ThemeArticleListRelationFilter
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    theme?: ThemeArticleOrderByRelationAggregateInput
  }

  export type ArticleWhereUniqueInput = {
    id?: number
  }

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _avg?: ArticleAvgOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
    _sum?: ArticleSumOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    status?: BoolWithAggregatesFilter | boolean
    title?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
  }

  export type ImageWhereInput = {
    AND?: Enumerable<ImageWhereInput>
    OR?: Enumerable<ImageWhereInput>
    NOT?: Enumerable<ImageWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    theme?: ThemeImageListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    theme?: ThemeImageOrderByRelationAggregateInput
  }

  export type ImageWhereUniqueInput = {
    id?: number
  }

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type ThemeArticleWhereInput = {
    AND?: Enumerable<ThemeArticleWhereInput>
    OR?: Enumerable<ThemeArticleWhereInput>
    NOT?: Enumerable<ThemeArticleWhereInput>
    id?: IntFilter | number
    themeId?: IntFilter | number
    theme?: XOR<ThemeRelationFilter, ThemeWhereInput>
    articleId?: IntFilter | number
    article?: XOR<ArticleRelationFilter, ArticleWhereInput>
  }

  export type ThemeArticleOrderByWithRelationInput = {
    id?: SortOrder
    themeId?: SortOrder
    theme?: ThemeOrderByWithRelationInput
    articleId?: SortOrder
    article?: ArticleOrderByWithRelationInput
  }

  export type ThemeArticleWhereUniqueInput = {
    id?: number
    themeId?: number
    articleId?: number
  }

  export type ThemeArticleOrderByWithAggregationInput = {
    id?: SortOrder
    themeId?: SortOrder
    articleId?: SortOrder
    _count?: ThemeArticleCountOrderByAggregateInput
    _avg?: ThemeArticleAvgOrderByAggregateInput
    _max?: ThemeArticleMaxOrderByAggregateInput
    _min?: ThemeArticleMinOrderByAggregateInput
    _sum?: ThemeArticleSumOrderByAggregateInput
  }

  export type ThemeArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThemeArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThemeArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThemeArticleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    themeId?: IntWithAggregatesFilter | number
    articleId?: IntWithAggregatesFilter | number
  }

  export type ThemeImageWhereInput = {
    AND?: Enumerable<ThemeImageWhereInput>
    OR?: Enumerable<ThemeImageWhereInput>
    NOT?: Enumerable<ThemeImageWhereInput>
    id?: IntFilter | number
    themeId?: IntFilter | number
    theme?: XOR<ThemeRelationFilter, ThemeWhereInput>
    imageId?: IntFilter | number
    image?: XOR<ImageRelationFilter, ImageWhereInput>
  }

  export type ThemeImageOrderByWithRelationInput = {
    id?: SortOrder
    themeId?: SortOrder
    theme?: ThemeOrderByWithRelationInput
    imageId?: SortOrder
    image?: ImageOrderByWithRelationInput
  }

  export type ThemeImageWhereUniqueInput = {
    id?: number
    themeId?: number
    imageId?: number
  }

  export type ThemeImageOrderByWithAggregationInput = {
    id?: SortOrder
    themeId?: SortOrder
    imageId?: SortOrder
    _count?: ThemeImageCountOrderByAggregateInput
    _avg?: ThemeImageAvgOrderByAggregateInput
    _max?: ThemeImageMaxOrderByAggregateInput
    _min?: ThemeImageMinOrderByAggregateInput
    _sum?: ThemeImageSumOrderByAggregateInput
  }

  export type ThemeImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThemeImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThemeImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThemeImageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    themeId?: IntWithAggregatesFilter | number
    imageId?: IntWithAggregatesFilter | number
  }

  export type ThemeCreateInput = {
    title: string
    articles?: ThemeArticleCreateNestedManyWithoutThemeInput
    image?: ThemeImageCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateInput = {
    id?: number
    title: string
    articles?: ThemeArticleUncheckedCreateNestedManyWithoutThemeInput
    image?: ThemeImageUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    articles?: ThemeArticleUpdateManyWithoutThemeNestedInput
    image?: ThemeImageUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    articles?: ThemeArticleUncheckedUpdateManyWithoutThemeNestedInput
    image?: ThemeImageUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ThemeCreateManyInput = {
    id?: number
    title: string
  }

  export type ThemeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ArticleCreateInput = {
    status: boolean
    title: string
    content: string
    image: string
    theme?: ThemeArticleCreateNestedManyWithoutArticleInput
  }

  export type ArticleUncheckedCreateInput = {
    id?: number
    status: boolean
    title: string
    content: string
    image: string
    theme?: ThemeArticleUncheckedCreateNestedManyWithoutArticleInput
  }

  export type ArticleUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    theme?: ThemeArticleUpdateManyWithoutArticleNestedInput
  }

  export type ArticleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    theme?: ThemeArticleUncheckedUpdateManyWithoutArticleNestedInput
  }

  export type ArticleCreateManyInput = {
    id?: number
    status: boolean
    title: string
    content: string
    image: string
  }

  export type ArticleUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateInput = {
    name: string
    theme?: ThemeImageCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    name: string
    theme?: ThemeImageUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    theme?: ThemeImageUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    theme?: ThemeImageUncheckedUpdateManyWithoutImageNestedInput
  }

  export type ImageCreateManyInput = {
    id?: number
    name: string
  }

  export type ImageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeArticleCreateInput = {
    theme: ThemeCreateNestedOneWithoutArticlesInput
    article: ArticleCreateNestedOneWithoutThemeInput
  }

  export type ThemeArticleUncheckedCreateInput = {
    id?: number
    themeId: number
    articleId: number
  }

  export type ThemeArticleUpdateInput = {
    theme?: ThemeUpdateOneRequiredWithoutArticlesNestedInput
    article?: ArticleUpdateOneRequiredWithoutThemeNestedInput
  }

  export type ThemeArticleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
    articleId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeArticleCreateManyInput = {
    id?: number
    themeId: number
    articleId: number
  }

  export type ThemeArticleUpdateManyMutationInput = {

  }

  export type ThemeArticleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
    articleId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeImageCreateInput = {
    theme: ThemeCreateNestedOneWithoutImageInput
    image: ImageCreateNestedOneWithoutThemeInput
  }

  export type ThemeImageUncheckedCreateInput = {
    id?: number
    themeId: number
    imageId: number
  }

  export type ThemeImageUpdateInput = {
    theme?: ThemeUpdateOneRequiredWithoutImageNestedInput
    image?: ImageUpdateOneRequiredWithoutThemeNestedInput
  }

  export type ThemeImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeImageCreateManyInput = {
    id?: number
    themeId: number
    imageId: number
  }

  export type ThemeImageUpdateManyMutationInput = {

  }

  export type ThemeImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type ThemeArticleListRelationFilter = {
    every?: ThemeArticleWhereInput
    some?: ThemeArticleWhereInput
    none?: ThemeArticleWhereInput
  }

  export type ThemeImageListRelationFilter = {
    every?: ThemeImageWhereInput
    some?: ThemeImageWhereInput
    none?: ThemeImageWhereInput
  }

  export type ThemeArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThemeImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThemeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type ThemeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type ThemeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type ThemeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
  }

  export type ArticleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
  }

  export type ArticleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThemeRelationFilter = {
    is?: ThemeWhereInput
    isNot?: ThemeWhereInput
  }

  export type ArticleRelationFilter = {
    is?: ArticleWhereInput
    isNot?: ArticleWhereInput
  }

  export type ThemeArticleCountOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    articleId?: SortOrder
  }

  export type ThemeArticleAvgOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    articleId?: SortOrder
  }

  export type ThemeArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    articleId?: SortOrder
  }

  export type ThemeArticleMinOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    articleId?: SortOrder
  }

  export type ThemeArticleSumOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    articleId?: SortOrder
  }

  export type ImageRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type ThemeImageCountOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    imageId?: SortOrder
  }

  export type ThemeImageAvgOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    imageId?: SortOrder
  }

  export type ThemeImageMaxOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    imageId?: SortOrder
  }

  export type ThemeImageMinOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    imageId?: SortOrder
  }

  export type ThemeImageSumOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
    imageId?: SortOrder
  }

  export type ThemeArticleCreateNestedManyWithoutThemeInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutThemeInput>, Enumerable<ThemeArticleUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutThemeInput>
    createMany?: ThemeArticleCreateManyThemeInputEnvelope
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
  }

  export type ThemeImageCreateNestedManyWithoutThemeInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutThemeInput>, Enumerable<ThemeImageUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutThemeInput>
    createMany?: ThemeImageCreateManyThemeInputEnvelope
    connect?: Enumerable<ThemeImageWhereUniqueInput>
  }

  export type ThemeArticleUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutThemeInput>, Enumerable<ThemeArticleUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutThemeInput>
    createMany?: ThemeArticleCreateManyThemeInputEnvelope
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
  }

  export type ThemeImageUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutThemeInput>, Enumerable<ThemeImageUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutThemeInput>
    createMany?: ThemeImageCreateManyThemeInputEnvelope
    connect?: Enumerable<ThemeImageWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ThemeArticleUpdateManyWithoutThemeNestedInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutThemeInput>, Enumerable<ThemeArticleUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutThemeInput>
    upsert?: Enumerable<ThemeArticleUpsertWithWhereUniqueWithoutThemeInput>
    createMany?: ThemeArticleCreateManyThemeInputEnvelope
    set?: Enumerable<ThemeArticleWhereUniqueInput>
    disconnect?: Enumerable<ThemeArticleWhereUniqueInput>
    delete?: Enumerable<ThemeArticleWhereUniqueInput>
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
    update?: Enumerable<ThemeArticleUpdateWithWhereUniqueWithoutThemeInput>
    updateMany?: Enumerable<ThemeArticleUpdateManyWithWhereWithoutThemeInput>
    deleteMany?: Enumerable<ThemeArticleScalarWhereInput>
  }

  export type ThemeImageUpdateManyWithoutThemeNestedInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutThemeInput>, Enumerable<ThemeImageUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutThemeInput>
    upsert?: Enumerable<ThemeImageUpsertWithWhereUniqueWithoutThemeInput>
    createMany?: ThemeImageCreateManyThemeInputEnvelope
    set?: Enumerable<ThemeImageWhereUniqueInput>
    disconnect?: Enumerable<ThemeImageWhereUniqueInput>
    delete?: Enumerable<ThemeImageWhereUniqueInput>
    connect?: Enumerable<ThemeImageWhereUniqueInput>
    update?: Enumerable<ThemeImageUpdateWithWhereUniqueWithoutThemeInput>
    updateMany?: Enumerable<ThemeImageUpdateManyWithWhereWithoutThemeInput>
    deleteMany?: Enumerable<ThemeImageScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ThemeArticleUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutThemeInput>, Enumerable<ThemeArticleUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutThemeInput>
    upsert?: Enumerable<ThemeArticleUpsertWithWhereUniqueWithoutThemeInput>
    createMany?: ThemeArticleCreateManyThemeInputEnvelope
    set?: Enumerable<ThemeArticleWhereUniqueInput>
    disconnect?: Enumerable<ThemeArticleWhereUniqueInput>
    delete?: Enumerable<ThemeArticleWhereUniqueInput>
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
    update?: Enumerable<ThemeArticleUpdateWithWhereUniqueWithoutThemeInput>
    updateMany?: Enumerable<ThemeArticleUpdateManyWithWhereWithoutThemeInput>
    deleteMany?: Enumerable<ThemeArticleScalarWhereInput>
  }

  export type ThemeImageUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutThemeInput>, Enumerable<ThemeImageUncheckedCreateWithoutThemeInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutThemeInput>
    upsert?: Enumerable<ThemeImageUpsertWithWhereUniqueWithoutThemeInput>
    createMany?: ThemeImageCreateManyThemeInputEnvelope
    set?: Enumerable<ThemeImageWhereUniqueInput>
    disconnect?: Enumerable<ThemeImageWhereUniqueInput>
    delete?: Enumerable<ThemeImageWhereUniqueInput>
    connect?: Enumerable<ThemeImageWhereUniqueInput>
    update?: Enumerable<ThemeImageUpdateWithWhereUniqueWithoutThemeInput>
    updateMany?: Enumerable<ThemeImageUpdateManyWithWhereWithoutThemeInput>
    deleteMany?: Enumerable<ThemeImageScalarWhereInput>
  }

  export type ThemeArticleCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutArticleInput>, Enumerable<ThemeArticleUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutArticleInput>
    createMany?: ThemeArticleCreateManyArticleInputEnvelope
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
  }

  export type ThemeArticleUncheckedCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutArticleInput>, Enumerable<ThemeArticleUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutArticleInput>
    createMany?: ThemeArticleCreateManyArticleInputEnvelope
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ThemeArticleUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutArticleInput>, Enumerable<ThemeArticleUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<ThemeArticleUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: ThemeArticleCreateManyArticleInputEnvelope
    set?: Enumerable<ThemeArticleWhereUniqueInput>
    disconnect?: Enumerable<ThemeArticleWhereUniqueInput>
    delete?: Enumerable<ThemeArticleWhereUniqueInput>
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
    update?: Enumerable<ThemeArticleUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<ThemeArticleUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<ThemeArticleScalarWhereInput>
  }

  export type ThemeArticleUncheckedUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<ThemeArticleCreateWithoutArticleInput>, Enumerable<ThemeArticleUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<ThemeArticleCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<ThemeArticleUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: ThemeArticleCreateManyArticleInputEnvelope
    set?: Enumerable<ThemeArticleWhereUniqueInput>
    disconnect?: Enumerable<ThemeArticleWhereUniqueInput>
    delete?: Enumerable<ThemeArticleWhereUniqueInput>
    connect?: Enumerable<ThemeArticleWhereUniqueInput>
    update?: Enumerable<ThemeArticleUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<ThemeArticleUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<ThemeArticleScalarWhereInput>
  }

  export type ThemeImageCreateNestedManyWithoutImageInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutImageInput>, Enumerable<ThemeImageUncheckedCreateWithoutImageInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutImageInput>
    createMany?: ThemeImageCreateManyImageInputEnvelope
    connect?: Enumerable<ThemeImageWhereUniqueInput>
  }

  export type ThemeImageUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutImageInput>, Enumerable<ThemeImageUncheckedCreateWithoutImageInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutImageInput>
    createMany?: ThemeImageCreateManyImageInputEnvelope
    connect?: Enumerable<ThemeImageWhereUniqueInput>
  }

  export type ThemeImageUpdateManyWithoutImageNestedInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutImageInput>, Enumerable<ThemeImageUncheckedCreateWithoutImageInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutImageInput>
    upsert?: Enumerable<ThemeImageUpsertWithWhereUniqueWithoutImageInput>
    createMany?: ThemeImageCreateManyImageInputEnvelope
    set?: Enumerable<ThemeImageWhereUniqueInput>
    disconnect?: Enumerable<ThemeImageWhereUniqueInput>
    delete?: Enumerable<ThemeImageWhereUniqueInput>
    connect?: Enumerable<ThemeImageWhereUniqueInput>
    update?: Enumerable<ThemeImageUpdateWithWhereUniqueWithoutImageInput>
    updateMany?: Enumerable<ThemeImageUpdateManyWithWhereWithoutImageInput>
    deleteMany?: Enumerable<ThemeImageScalarWhereInput>
  }

  export type ThemeImageUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<Enumerable<ThemeImageCreateWithoutImageInput>, Enumerable<ThemeImageUncheckedCreateWithoutImageInput>>
    connectOrCreate?: Enumerable<ThemeImageCreateOrConnectWithoutImageInput>
    upsert?: Enumerable<ThemeImageUpsertWithWhereUniqueWithoutImageInput>
    createMany?: ThemeImageCreateManyImageInputEnvelope
    set?: Enumerable<ThemeImageWhereUniqueInput>
    disconnect?: Enumerable<ThemeImageWhereUniqueInput>
    delete?: Enumerable<ThemeImageWhereUniqueInput>
    connect?: Enumerable<ThemeImageWhereUniqueInput>
    update?: Enumerable<ThemeImageUpdateWithWhereUniqueWithoutImageInput>
    updateMany?: Enumerable<ThemeImageUpdateManyWithWhereWithoutImageInput>
    deleteMany?: Enumerable<ThemeImageScalarWhereInput>
  }

  export type ThemeCreateNestedOneWithoutArticlesInput = {
    create?: XOR<ThemeCreateWithoutArticlesInput, ThemeUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutArticlesInput
    connect?: ThemeWhereUniqueInput
  }

  export type ArticleCreateNestedOneWithoutThemeInput = {
    create?: XOR<ArticleCreateWithoutThemeInput, ArticleUncheckedCreateWithoutThemeInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutThemeInput
    connect?: ArticleWhereUniqueInput
  }

  export type ThemeUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<ThemeCreateWithoutArticlesInput, ThemeUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutArticlesInput
    upsert?: ThemeUpsertWithoutArticlesInput
    connect?: ThemeWhereUniqueInput
    update?: XOR<ThemeUpdateWithoutArticlesInput, ThemeUncheckedUpdateWithoutArticlesInput>
  }

  export type ArticleUpdateOneRequiredWithoutThemeNestedInput = {
    create?: XOR<ArticleCreateWithoutThemeInput, ArticleUncheckedCreateWithoutThemeInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutThemeInput
    upsert?: ArticleUpsertWithoutThemeInput
    connect?: ArticleWhereUniqueInput
    update?: XOR<ArticleUpdateWithoutThemeInput, ArticleUncheckedUpdateWithoutThemeInput>
  }

  export type ThemeCreateNestedOneWithoutImageInput = {
    create?: XOR<ThemeCreateWithoutImageInput, ThemeUncheckedCreateWithoutImageInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutImageInput
    connect?: ThemeWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutThemeInput = {
    create?: XOR<ImageCreateWithoutThemeInput, ImageUncheckedCreateWithoutThemeInput>
    connectOrCreate?: ImageCreateOrConnectWithoutThemeInput
    connect?: ImageWhereUniqueInput
  }

  export type ThemeUpdateOneRequiredWithoutImageNestedInput = {
    create?: XOR<ThemeCreateWithoutImageInput, ThemeUncheckedCreateWithoutImageInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutImageInput
    upsert?: ThemeUpsertWithoutImageInput
    connect?: ThemeWhereUniqueInput
    update?: XOR<ThemeUpdateWithoutImageInput, ThemeUncheckedUpdateWithoutImageInput>
  }

  export type ImageUpdateOneRequiredWithoutThemeNestedInput = {
    create?: XOR<ImageCreateWithoutThemeInput, ImageUncheckedCreateWithoutThemeInput>
    connectOrCreate?: ImageCreateOrConnectWithoutThemeInput
    upsert?: ImageUpsertWithoutThemeInput
    connect?: ImageWhereUniqueInput
    update?: XOR<ImageUpdateWithoutThemeInput, ImageUncheckedUpdateWithoutThemeInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ThemeArticleCreateWithoutThemeInput = {
    article: ArticleCreateNestedOneWithoutThemeInput
  }

  export type ThemeArticleUncheckedCreateWithoutThemeInput = {
    id?: number
    articleId: number
  }

  export type ThemeArticleCreateOrConnectWithoutThemeInput = {
    where: ThemeArticleWhereUniqueInput
    create: XOR<ThemeArticleCreateWithoutThemeInput, ThemeArticleUncheckedCreateWithoutThemeInput>
  }

  export type ThemeArticleCreateManyThemeInputEnvelope = {
    data: Enumerable<ThemeArticleCreateManyThemeInput>
    skipDuplicates?: boolean
  }

  export type ThemeImageCreateWithoutThemeInput = {
    image: ImageCreateNestedOneWithoutThemeInput
  }

  export type ThemeImageUncheckedCreateWithoutThemeInput = {
    id?: number
    imageId: number
  }

  export type ThemeImageCreateOrConnectWithoutThemeInput = {
    where: ThemeImageWhereUniqueInput
    create: XOR<ThemeImageCreateWithoutThemeInput, ThemeImageUncheckedCreateWithoutThemeInput>
  }

  export type ThemeImageCreateManyThemeInputEnvelope = {
    data: Enumerable<ThemeImageCreateManyThemeInput>
    skipDuplicates?: boolean
  }

  export type ThemeArticleUpsertWithWhereUniqueWithoutThemeInput = {
    where: ThemeArticleWhereUniqueInput
    update: XOR<ThemeArticleUpdateWithoutThemeInput, ThemeArticleUncheckedUpdateWithoutThemeInput>
    create: XOR<ThemeArticleCreateWithoutThemeInput, ThemeArticleUncheckedCreateWithoutThemeInput>
  }

  export type ThemeArticleUpdateWithWhereUniqueWithoutThemeInput = {
    where: ThemeArticleWhereUniqueInput
    data: XOR<ThemeArticleUpdateWithoutThemeInput, ThemeArticleUncheckedUpdateWithoutThemeInput>
  }

  export type ThemeArticleUpdateManyWithWhereWithoutThemeInput = {
    where: ThemeArticleScalarWhereInput
    data: XOR<ThemeArticleUpdateManyMutationInput, ThemeArticleUncheckedUpdateManyWithoutArticlesInput>
  }

  export type ThemeArticleScalarWhereInput = {
    AND?: Enumerable<ThemeArticleScalarWhereInput>
    OR?: Enumerable<ThemeArticleScalarWhereInput>
    NOT?: Enumerable<ThemeArticleScalarWhereInput>
    id?: IntFilter | number
    themeId?: IntFilter | number
    articleId?: IntFilter | number
  }

  export type ThemeImageUpsertWithWhereUniqueWithoutThemeInput = {
    where: ThemeImageWhereUniqueInput
    update: XOR<ThemeImageUpdateWithoutThemeInput, ThemeImageUncheckedUpdateWithoutThemeInput>
    create: XOR<ThemeImageCreateWithoutThemeInput, ThemeImageUncheckedCreateWithoutThemeInput>
  }

  export type ThemeImageUpdateWithWhereUniqueWithoutThemeInput = {
    where: ThemeImageWhereUniqueInput
    data: XOR<ThemeImageUpdateWithoutThemeInput, ThemeImageUncheckedUpdateWithoutThemeInput>
  }

  export type ThemeImageUpdateManyWithWhereWithoutThemeInput = {
    where: ThemeImageScalarWhereInput
    data: XOR<ThemeImageUpdateManyMutationInput, ThemeImageUncheckedUpdateManyWithoutImageInput>
  }

  export type ThemeImageScalarWhereInput = {
    AND?: Enumerable<ThemeImageScalarWhereInput>
    OR?: Enumerable<ThemeImageScalarWhereInput>
    NOT?: Enumerable<ThemeImageScalarWhereInput>
    id?: IntFilter | number
    themeId?: IntFilter | number
    imageId?: IntFilter | number
  }

  export type ThemeArticleCreateWithoutArticleInput = {
    theme: ThemeCreateNestedOneWithoutArticlesInput
  }

  export type ThemeArticleUncheckedCreateWithoutArticleInput = {
    id?: number
    themeId: number
  }

  export type ThemeArticleCreateOrConnectWithoutArticleInput = {
    where: ThemeArticleWhereUniqueInput
    create: XOR<ThemeArticleCreateWithoutArticleInput, ThemeArticleUncheckedCreateWithoutArticleInput>
  }

  export type ThemeArticleCreateManyArticleInputEnvelope = {
    data: Enumerable<ThemeArticleCreateManyArticleInput>
    skipDuplicates?: boolean
  }

  export type ThemeArticleUpsertWithWhereUniqueWithoutArticleInput = {
    where: ThemeArticleWhereUniqueInput
    update: XOR<ThemeArticleUpdateWithoutArticleInput, ThemeArticleUncheckedUpdateWithoutArticleInput>
    create: XOR<ThemeArticleCreateWithoutArticleInput, ThemeArticleUncheckedCreateWithoutArticleInput>
  }

  export type ThemeArticleUpdateWithWhereUniqueWithoutArticleInput = {
    where: ThemeArticleWhereUniqueInput
    data: XOR<ThemeArticleUpdateWithoutArticleInput, ThemeArticleUncheckedUpdateWithoutArticleInput>
  }

  export type ThemeArticleUpdateManyWithWhereWithoutArticleInput = {
    where: ThemeArticleScalarWhereInput
    data: XOR<ThemeArticleUpdateManyMutationInput, ThemeArticleUncheckedUpdateManyWithoutThemeInput>
  }

  export type ThemeImageCreateWithoutImageInput = {
    theme: ThemeCreateNestedOneWithoutImageInput
  }

  export type ThemeImageUncheckedCreateWithoutImageInput = {
    id?: number
    themeId: number
  }

  export type ThemeImageCreateOrConnectWithoutImageInput = {
    where: ThemeImageWhereUniqueInput
    create: XOR<ThemeImageCreateWithoutImageInput, ThemeImageUncheckedCreateWithoutImageInput>
  }

  export type ThemeImageCreateManyImageInputEnvelope = {
    data: Enumerable<ThemeImageCreateManyImageInput>
    skipDuplicates?: boolean
  }

  export type ThemeImageUpsertWithWhereUniqueWithoutImageInput = {
    where: ThemeImageWhereUniqueInput
    update: XOR<ThemeImageUpdateWithoutImageInput, ThemeImageUncheckedUpdateWithoutImageInput>
    create: XOR<ThemeImageCreateWithoutImageInput, ThemeImageUncheckedCreateWithoutImageInput>
  }

  export type ThemeImageUpdateWithWhereUniqueWithoutImageInput = {
    where: ThemeImageWhereUniqueInput
    data: XOR<ThemeImageUpdateWithoutImageInput, ThemeImageUncheckedUpdateWithoutImageInput>
  }

  export type ThemeImageUpdateManyWithWhereWithoutImageInput = {
    where: ThemeImageScalarWhereInput
    data: XOR<ThemeImageUpdateManyMutationInput, ThemeImageUncheckedUpdateManyWithoutThemeInput>
  }

  export type ThemeCreateWithoutArticlesInput = {
    title: string
    image?: ThemeImageCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutArticlesInput = {
    id?: number
    title: string
    image?: ThemeImageUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutArticlesInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutArticlesInput, ThemeUncheckedCreateWithoutArticlesInput>
  }

  export type ArticleCreateWithoutThemeInput = {
    status: boolean
    title: string
    content: string
    image: string
  }

  export type ArticleUncheckedCreateWithoutThemeInput = {
    id?: number
    status: boolean
    title: string
    content: string
    image: string
  }

  export type ArticleCreateOrConnectWithoutThemeInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutThemeInput, ArticleUncheckedCreateWithoutThemeInput>
  }

  export type ThemeUpsertWithoutArticlesInput = {
    update: XOR<ThemeUpdateWithoutArticlesInput, ThemeUncheckedUpdateWithoutArticlesInput>
    create: XOR<ThemeCreateWithoutArticlesInput, ThemeUncheckedCreateWithoutArticlesInput>
  }

  export type ThemeUpdateWithoutArticlesInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: ThemeImageUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image?: ThemeImageUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ArticleUpsertWithoutThemeInput = {
    update: XOR<ArticleUpdateWithoutThemeInput, ArticleUncheckedUpdateWithoutThemeInput>
    create: XOR<ArticleCreateWithoutThemeInput, ArticleUncheckedCreateWithoutThemeInput>
  }

  export type ArticleUpdateWithoutThemeInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ArticleUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeCreateWithoutImageInput = {
    title: string
    articles?: ThemeArticleCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutImageInput = {
    id?: number
    title: string
    articles?: ThemeArticleUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutImageInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutImageInput, ThemeUncheckedCreateWithoutImageInput>
  }

  export type ImageCreateWithoutThemeInput = {
    name: string
  }

  export type ImageUncheckedCreateWithoutThemeInput = {
    id?: number
    name: string
  }

  export type ImageCreateOrConnectWithoutThemeInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutThemeInput, ImageUncheckedCreateWithoutThemeInput>
  }

  export type ThemeUpsertWithoutImageInput = {
    update: XOR<ThemeUpdateWithoutImageInput, ThemeUncheckedUpdateWithoutImageInput>
    create: XOR<ThemeCreateWithoutImageInput, ThemeUncheckedCreateWithoutImageInput>
  }

  export type ThemeUpdateWithoutImageInput = {
    title?: StringFieldUpdateOperationsInput | string
    articles?: ThemeArticleUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    articles?: ThemeArticleUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ImageUpsertWithoutThemeInput = {
    update: XOR<ImageUpdateWithoutThemeInput, ImageUncheckedUpdateWithoutThemeInput>
    create: XOR<ImageCreateWithoutThemeInput, ImageUncheckedCreateWithoutThemeInput>
  }

  export type ImageUpdateWithoutThemeInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeArticleCreateManyThemeInput = {
    id?: number
    articleId: number
  }

  export type ThemeImageCreateManyThemeInput = {
    id?: number
    imageId: number
  }

  export type ThemeArticleUpdateWithoutThemeInput = {
    article?: ArticleUpdateOneRequiredWithoutThemeNestedInput
  }

  export type ThemeArticleUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    articleId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeArticleUncheckedUpdateManyWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    articleId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeImageUpdateWithoutThemeInput = {
    image?: ImageUpdateOneRequiredWithoutThemeNestedInput
  }

  export type ThemeImageUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeImageUncheckedUpdateManyWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeArticleCreateManyArticleInput = {
    id?: number
    themeId: number
  }

  export type ThemeArticleUpdateWithoutArticleInput = {
    theme?: ThemeUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ThemeArticleUncheckedUpdateWithoutArticleInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeArticleUncheckedUpdateManyWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeImageCreateManyImageInput = {
    id?: number
    themeId: number
  }

  export type ThemeImageUpdateWithoutImageInput = {
    theme?: ThemeUpdateOneRequiredWithoutImageNestedInput
  }

  export type ThemeImageUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeImageUncheckedUpdateManyWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}